[package]
name = "lex-decks"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
leptos = { version = "0.8.0-beta"}
leptos_router = { version = "0.8.0-beta" }
axum = { version = "0.8.1", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }
leptos_axum = { version = "0.8.0-beta", optional = true }
leptos_meta = { version = "0.8.0-beta" }
tokio = { version = "1", features = ["full"], optional = true }
wasm-bindgen = { version = "=0.2.100", optional = true }
serde = { version = "1.0.219", features = ["derive"] }
serde_arrays = "0.1.0"
serde_json = "1.0.120"
struct_field_names = "0.2.1"
strum = { version = "0.27.1", features = ["strum_macros", "derive"] }
take_mut = "0.2.2"
partial_derive = "0.1.0"
pasetors = {version = "=0.7.1", default-features = false, features = ["v4"]}
leptos-use = "0.16.0-beta"
serde-wasm-bindgen = "0.6"
icondata = { version = "0.5.0" }
leptos_icons = { path = "../../Projects/leptos-icons" }
aws-config = {version = "1.1.9", optional = true}
aws-sdk-dynamodb = {version = "1.71.0", optional = true}
serde_dynamo = {version = "4.2.14", features = ["aws-sdk-dynamodb+1"], optional = true}
lettre = { version = "0.11.15" , default-features = false, features = ["builder", "hostname", "pool", "smtp-transport", "tokio1-rustls-tls", "rustls-tls", "tokio1"], optional = true }
axum-extra = {version = "0.10.1", default-features = false, features = ["cookie"], optional = true}

[features]
default = ["hydrate", "ssr"]
hydrate = ["leptos/hydrate", "dep:console_error_panic_hook", "dep:wasm-bindgen",]
ssr = [
    "dep:aws-config",
    "dep:aws-sdk-dynamodb",
    "dep:serde_dynamo",
    "dep:axum",
    "dep:tokio",
    "dep:leptos_axum",
    "dep:axum-extra",
    "dep:lettre",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "leptos-use/ssr",
    "leptos-use/axum",
    "pasetors/std",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "tokio", "leptos_axum"]
skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"]]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 0
[profile.dev.package."*"]
opt-level = 3


[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "lex-decks"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "assets/styles/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

[target.x86_64-unknown-linux-gnu]
linker = "clang"
rustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold"]
